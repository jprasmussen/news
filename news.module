<?php

/**
 * @file
 * News provides a content-type, taxonomy vocabulary, views and various
 * features to mimic a WordPress-style news.
 */

// The default system name for the news-post content type.  This can be changed
// through the admin UI.
define('news_DEFAULT_CTYPE', 'news');

/**
 * Implements hook_help().
 */
function news_help($path, $arg) {
  switch ($path) {
    case 'admin/help#news':
      $output = '';
      $output .= t('The News module provides some of the basic features similar to those found on WordPress:');
      $output .= '<ul>';
      $output .= '<li>' . t('A content type.') . '</li>';
      $output .= '<li>' . t('The ability to tag posts with keywords.') . '</li>';
      $output .= '<li>' . t('A set of pages to browse the news archive, or browse by year, month or day &ndash; for example: !example_urls.', array('!example_urls' => "/news<br />\n/news/2010<br />\n/news/2010/02<br />\n/news/2010/02/20")) . '</li>';
      $output .= '<li>' . t('A navigation menu which gives links to the years/months where content is published, and a count of the number of news posts for each year/month.') . '</li>';
      $output .= '</ul>';

      $output .= t('New news posts can be added at <a href="@url">@url</a>.', array('@url' => url('node/add/news')));

      $output .= '<h2>' . t('Recommended modules') . '</h2>';
      $output .= '<ul>';
      // The linkback module is in development, to add support for pingbacks and trackbacks.
      // $output .= '<li>' . t('The <a href="@linkback_module_url">linkback module</a> can enable <strong>pingbacks</strong> and <strong>trackbacks</strong> to be sent and received by your news posts.', array('@linkback_module_url' => 'http://drupal.org/project/linkback')) . '</li>';
      $output .= '<li>' . t('The <a href="@mollom_module_url">mollom module</a> provides a spam moderation tool, to prevent spam comments from being added to your site.', array('@mollom_module_url' => 'http://drupal.org/project/mollom')) . '</li>';
      $output .= '</ul>';

      return $output;
  }
}

/**
 * Implements hook_views_api().
 */
function news_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function news_menu() {
  $items = array();

  // Add a menu-item at news/add, to provide an ACTION link for all pages
  // beginning news/. The link simply redirects to node/add/news.
  $items['news/add'] = array(
    'title' => 'Add News post',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/news'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'news'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function news_menu_alter(&$menu) {
  // Hack the menu to allow node/add/news to be a contextual link.
  $menu['node/add/news']['_tab'] = TRUE;
  $menu['node/add/news']['tab_parent'] = 'node/add';
  $menu['node/add/news']['context'] = MENU_CONTEXT_INLINE;
  // Change the menu-title so the contextual link reads 'Create News post'.
  $menu['node/add/news']['title'] = 'Create @name';
  $menu['node/add/news']['title callback'] = 't';
  $menu['node/add/news']['title arguments'] = array('@name' => 'News post');
}

/**
 * Implements hook_theme().
 */
function news_theme() {
  return array(
    // news_archive is the sidebar menu which displays the news navigation.
    'news_archive' => array(
      'render element' => 'element',
      'file' => 'news.theme.inc',
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function news_node_info() {
  return array(
    news_DEFAULT_CTYPE => array(
      'base' => 'news',
      'name' => t('News post'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'locked' => FALSE,
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function news_node_view($node, $view_mode, $langcode) {
  // Only act on full page views for News nodes.
  if (!($view_mode == 'full'&& $node->type == news_DEFAULT_CTYPE)) {
    return;
  }

  // Set an appropriate menu-trail based on the path alias (which should be
  // news/yyyy/mm/dd/title).
  $date = (object) getdate($node->created);

  $trail = array(
    array(
      'title' => t('Home'),
      'href' => '<front>',
      'localized_options' => array(),
      'type' => MENU_NORMAL_ITEM,
    ),
    array(
      'title' => t('News'),
      'href' => 'news',
      'localized_options' => array(),
      'type' => MENU_NORMAL_ITEM,
    ),
    array(
      'title' => $date->year,
      'href' => "news/{$date->year}",
      'localized_options' => array(),
      'type' => MENU_NORMAL_ITEM,
    ),
    array(
      'title' => t($date->month),
      'href' => "news/{$date->year}/" . str_pad($date->mon, 2, '0', STR_PAD_LEFT),
      'localized_options' => array(),
      'type' => MENU_NORMAL_ITEM,
    ),
    array(
      'title' => t('@day<sup>@ordinal</sup>', array('@day' => $date->mday, '@ordinal' => t(date('S', $node->created)))),
      'href' => "news/{$date->year}/" . str_pad($date->mon, 2, '0', STR_PAD_LEFT) . "/" . str_pad($date->mday, 2, '0', STR_PAD_LEFT),
      'localized_options' => array('html' => TRUE),
      'type' => MENU_NORMAL_ITEM,
    ),
    array(
      'title' => $node->title,
      'href' => "node/{$node->nid}",
      'localized_options' => array(),
      'type' => MENU_NORMAL_ITEM,
    ),
  );

  menu_set_active_trail($trail);
}

/**
 * Implements hook_form().
 */
function news_form($node, &$form_state) {
  $type = node_type_get_type($node);
  $form = array();

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
  );

  return $form;
}

/**
 * Implements hook_block_info().
 */
function news_block_info() {
  $blocks['date_navigation'] = array(
    'info' => t('News date navigation'),
    // The block displays a navigation menu, which may have active menu-items.
    // The active menu-items will change per page, and the accessible news
    // posts may change per user, depending on permissions.
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function news_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'date_navigation':
      $archive = _news_get_news_archive_tree();
      // If there aren't any news posts, hide the block.
      if (empty($archive)) {
        return;
      }

      $block = array(
        'subject' => t('News Archive'),
        'content' => array(
          'show_all_link' => l(t('All news posts'), 'news'),
          'archive' => $archive,
          '#theme' => 'news_archive',
          '#cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_USER,
          '#contextual_links' => array(
            // This contextual link depends on the menu_alter above.
            'news' => array('node/add', array()),
          ),
        ),
      );
  }
  return $block;
}

/**
 * Build a data tree of all published news posts, with their year, month, and
 * post-counts.
 *
 * Format:
 * [2010] =>
 *           count  => 3
 *           text   => 2010
 *           months =>
 *                     [2] =>
 *                            count => 1
 *                            text  => Februrary
 *                            days  =>
 *                                     [16] =>
 *                                             count => 1
 *                                             text  => Tuesday
 */
function _news_get_news_archive_tree() {
  $tree = array();

  // Declare the use of month-names and days to ensure translatioin tools can
  // discover language-use in this module.
  array(
    t('Sunday'),
    t('Monday'),
    t('Tuesday'),
    t('Wednesday'),
    t('Thursday'),
    t('Friday'),
    t('Saturday'),
  );
  array(
    t('January'),
    t('February'),
    t('March'),
    t('April'),
    t('May'),
    t('June'),
    t('July'),
    t('August'),
    t('September'),
    t('October'),
    t('November'),
    t('December'),
  );

  foreach (_news__get_news_posts() as $post) {
    // Assume that getdate will return month-names in English.
    $date = (object) getdate($post->created);

    // Add the year.
    if (!array_key_exists($date->year, $tree)) {
      $tree[$date->year] = array(
        'count' => 0,
        // The year is numeric (e.g. 2011) so is not translated.
        'text' => $date->year,
        'url' => 'news/' . $date->year,
        'months' => array(),
      );
    }

    // Add the month.
    if (!array_key_exists($date->mon, $tree[$date->year]['months'])) {
      $tree[$date->year]['months'][$date->mon] = array(
        'count' => 0,
        // The month-name is a string (January, February, etc) so is translated.
        'text' => t($date->month),
        'url' => $tree[$date->year]['url'] . '/' . str_pad($date->mon, 2, '0', STR_PAD_LEFT),
        'days' => array(),
      );
    }


     // Add the day.
    if (!array_key_exists($date->mday, $tree[$date->year]['months'][$date->mon]['days'])) {
      $tree[$date->year]['months'][$date->mon]['days'][$date->mday] = array(
        'count' => 0,
        // The week-day is numeric (0 - 31) so is not translated.
        'text' => $date->weekday,
        'url' => $tree[$date->year]['months'][$date->mon]['url'] . '/' . str_pad($date->mday, 2, '0', STR_PAD_LEFT),
      );
    }
    $tree[$date->year]['count']++;
    $tree[$date->year]['months'][$date->mon]['count']++;
    $tree[$date->year]['months'][$date->mon]['days'][$date->mday]['count']++;
  }
  return $tree;
}

/**
 * Fetch the nid and created-date of all published news-posts.
 *
 * @return array
 * An array of objects, each with the property nid and created, sorted by
 * creation-time (new to old).
 */
function _news__get_news_posts() {
  $news_posts = &drupal_static(__FUNCTION__, NULL);
  if (is_null($news_posts)) {
    // Query for News nodes which the current user has access to.
    $news_posts = db_select('node', 'n', array('target' => 'slave'))
      ->fields('n', array('nid', 'created'))
      ->condition("n.type", news_DEFAULT_CTYPE)
      ->condition("n.status", NODE_PUBLISHED)
      ->orderBy("n.created", 'DESC')
      ->addTag('node_access')
      ->execute()
      ->fetchAll();
  }
  return $news_posts;
}
